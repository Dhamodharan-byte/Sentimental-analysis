# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QjGzyiwwPOxfvMp0_HrXhXWgfHfwLjzb
"""

pip install pandas scikit-learn nltk

import pandas as pd
import string
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Download stopwords from NLTK
nltk.download('stopwords')

# Load IMDb dataset, handling potential parsing errors
df = pd.read_csv("/content/IMDB Dataset.csv", on_bad_lines='skip', engine="python")

# Keep only relevant columns
df = df[['review', 'sentiment']]

# Convert labels: 'positive' → 1, 'negative' → 0
df['sentiment'] = df['sentiment'].map({'positive': 1, 'negative': 0})

# Text preprocessing function
def preprocess_text(text):
    stop_words = set(stopwords.words('english')) - {"not"}  # Keep "not" to preserve negation
    text = text.lower()  # Convert to lowercase
    text = "".join([char for char in text if char not in string.punctuation])  # Remove punctuation
    words = text.split()  # Tokenization
    words = [word for word in words if word not in stop_words]  # Remove stopwords except "not"
    return " ".join(words)

# Apply preprocessing
df['Processed_Review'] = df['review'].apply(preprocess_text)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df['Processed_Review'], df['sentiment'], test_size=0.2, random_state=42)

# Convert text into numerical features using TF-IDF
vectorizer = TfidfVectorizer(max_features=10000, ngram_range=(1,2))  # Use unigrams and bigrams
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train a Logistic Regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train_tfidf, y_train)

# Evaluate model performance
y_pred = model.predict(X_test_tfidf)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")
print("Classification Report:\n", classification_report(y_test, y_pred))

# User input for sentiment prediction
while True:
    user_input = input("Enter a movie review (or type 'exit' to quit): ")
    if user_input.lower() == 'exit':
        print("Exiting Sentiment Analysis...")
        break

    processed_input = vectorizer.transform([preprocess_text(user_input)])
    predicted_sentiment = model.predict(processed_input)
    sentiment_label = "Positive" if predicted_sentiment[0] == 1 else "Negative"
    print(f"Predicted Sentiment: {sentiment_label}\n")

!pip install gradio

# prompt: generate a interface for above code using gradio with differnt\ colors on the ui

import gradio as gr
import pandas as pd
import string
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Download stopwords if not already present
try:
    stop_words = set(stopwords.words('english')) - {"not"}
except LookupError:
    nltk.download('stopwords')
    stop_words = set(stopwords.words('english')) - {"not"}


# Load IMDb dataset (replace with your actual file path if needed)
df = pd.read_csv("/content/IMDB Dataset.csv", on_bad_lines='skip', engine="python")
df = df[['review', 'sentiment']]
df['sentiment'] = df['sentiment'].map({'positive': 1, 'negative': 0})

def preprocess_text(text):
    text = text.lower()
    text = "".join([char for char in text if char not in string.punctuation])
    words = text.split()
    words = [word for word in words if word not in stop_words]
    return " ".join(words)

df['Processed_Review'] = df['review'].apply(preprocess_text)
X_train, X_test, y_train, y_test = train_test_split(df['Processed_Review'], df['sentiment'], test_size=0.2, random_state=42)

vectorizer = TfidfVectorizer(max_features=10000, ngram_range=(1,2))
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

model = LogisticRegression(max_iter=1000)
model.fit(X_train_tfidf, y_train)

def predict_sentiment(review):
    processed_input = vectorizer.transform([preprocess_text(review)])
    predicted_sentiment = model.predict(processed_input)
    sentiment_label = "Positive" if predicted_sentiment[0] == 1 else "Negative"
    return sentiment_label

iface = gr.Interface(
    fn=predict_sentiment,
    inputs=gr.Textbox(lines=5, label="Enter your movie review here:"),
    outputs="text",
    title="Movie Review Sentiment Analysis",
    description="Enter a movie review and get its predicted sentiment.",
    theme=gr.themes.Soft(), # Example theme
    css="""
    #component-0 {
      background-color: #f0f0f0;
      border-color: #ccc;
    }

    #component-1 {
      background-color: #e0e0e0;
    }

    """, # customize with more css
)
iface.launch()